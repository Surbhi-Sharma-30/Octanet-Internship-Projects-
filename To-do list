HTML Codes
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>my todo list</title>
<link rel="stylesheet" href="style.css">
<link rel="stylesheet" href="style-media.css">
<script src="https://kit.fontawesome.com/4f38b8c761.js"
crossorigin="anonymous"></script>
<link rel="shortcut icon" href="icon.jpg" type="image/x-icon">
</head>
<body>
<div class="flex-container">
<div class="container">
<h1 class="heading">TO DO LIST!</h1>
<div class="content">
<p class="intro-text">Welcome back! What's on your mind today?</p>
<div class="list-input ">
<input type="text" placeholder="create a todo" class="input-value">
<button type="button" class="add">ADD</button>
</div>
<ul class="list-items ">
<!-- items will be added by js -->
<!-- this structure will be created by js dynamically -->
<!--<li>
<input type="checkbox">
<input type="text">
<span class="edit">
<i class="fa-solid fa-pen-to-square"></i>
</span>
<span class="delete">
<i class="fa-solid fa-x"></i>
</span>
</li>-->
</ul>
</div>
</div>
</div>
<script src="script.js"></script>
</body>
</html>
CSS Codes
@import
url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,700;1,300&display=swap');
*{
margin: 0;
padding: 0;
box-sizing: border-box;
}
.flex-container{
width: 100vw;
height: 100vh;
display: flex;
align-items: center;
justify-content: center;
background-image: url('to-do.jpg');
background-size: cover;
background-repeat: no-repeat;
}
.container{
font-family: 'Montserrat', sans-serif;
height: max-content;
width: 45vw;
}
.heading{
background-image: linear-gradient(90deg, rgba(2, 0, 36, 0.604) 0%, rgba(9, 9, 121, 0.772)
35%, rgba(0, 213, 255, 0.787) 100%);
background-size: cover;
color: white;
background-repeat: no-repeat;
text-align: center;
padding-block: 1rem;
margin-block-end: 3rem;
text-shadow: 0 0 5px rgba(255, 255, 255, 0.774);
font-size: 3rem;
border-radius: 5px;
border: 1.5px solid rgba(250, 250, 250, 0.847);
}
.content{
background-color: rgba(55, 190, 235, 0.354);
backdrop-filter: blur(3px);
border-radius: 5px;
border: 1.5px solid rgba(250, 250, 250, 0.847);
padding: 1rem;
}
.list-input{
display: flex;
gap: 2rem;
margin-bottom: 1.5rem;
}
.intro-text{
margin-block: 0.4rem;
font-style: italic;
font-weight: 900;
}
.input-value{
outline: none;
padding-block: 0.2rem;
padding-inline: 0.7rem;
flex-grow: 1;
font-size: 1.2rem;
}
.add{
font-size: 1.2rem;
padding-inline: 1.5rem;
padding-block:0.2rem;
font-weight: 600;
background-image: linear-gradient(90deg, rgb(26, 82, 194), rgba(0,212,255,1));
border-radius: 2px;
border: none;
color:white;
cursor: pointer;
}
.add:hover{
background-image: linear-gradient(90deg,rgba(0, 213, 255, 0.679),rgba(0, 213, 255,
0.501));
}
.list-items{
list-style-type: none;
padding-block: 0.8rem;
}
.line{
text-decoration: line-through solid rgba(226, 226, 233, 0.81) 1px;
}
/* elem added by js css */
.li{
border-bottom: 2px solid black;
display: flex;
/* flex-wrap: wrap; */
margin-block-end: 0.6rem;
}
.check{
accent-color: rgb(7, 63, 124);
margin-inline-end: 0.8rem;
cursor: pointer;
}
.input{
outline: none;
border: none;
background-color: transparent;
color: black;
flex-grow: 1;
font-size: 1.1rem;
}
.edit,.delete{
margin-inline: 0.6rem;
cursor: pointer;
}
CSS Media Codes
@media screen and (width>=1500px) {
    html{
    font-size: 130%;
    }
    }
    @media screen and (width>=1200px) {
    html{
    font-size: 110%;
    }
    }
    @media screen and (width<=1000px) {
    .container{
    width: 50vw;
    }
    }
    @media screen and (width<=800px) {
    html{
    font-size: 90%;
    }
    }
    @media screen and (width<=800px) {
    .list-input{
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 0.5rem;
    }
    .heading{
    font-size: 2rem;
    }
    }
    @media screen and (width<=600px) {
    .container{
    width: 70vw;
    }
    }
    @media screen and (width<=400px) {
    html{
    font-size: 80%;
    }
    .container{
    width: 80vw;
    }
    }
    @media screen and (width<=350px){
        .container{
        width: 90vw;
    }
}
JS Codes
window.addEventListener('load',()=>{
    todos=JSON.parse(localStorage.getItem('todos'))||[];
    //implementing add button functionality
    const add=document.querySelector(".add");
    add.addEventListener('click',()=>{
    const inputVal=document.querySelector(".input-value");
    let myObj={
    value: inputVal.value,
    completed : false
    };
    todos.push(myObj);
    console.log(todos);
    localStorage.setItem('todos',JSON.stringify(todos));
    createItem();
    inputVal.value='';
    });
    createItem();
    });
    function createItem(){
    const listItems=document.querySelector(".list-items");
    listItems.innerHTML='';
    todos.forEach((elem)=>{
    let li=document.createElement("li");
    li.classList.add("li");
    listItems.appendChild(li);
    let check=document.createElement("input");
    check.type="checkbox";
    check.classList.add("check");
    li.appendChild(check);
    let input=document.createElement("input");
    input.type="text";
    input.readOnly=true;
    input.value=elem.value;
    input.classList.add("input");
    li.appendChild(input);
    let edit=document.createElement("span");
    edit.classList.add("edit");
    edit.innerHTML='<i class="fa-solid fa-pen-to-square"></i>';
    li.appendChild(edit);
    deleteElem=document.createElement("span");
    deleteElem.classList.add("delete");
    deleteElem.innerHTML='<i class="fa-solid fa-x"></i>';
    li.appendChild(deleteElem);
    if(elem.completed){
    input.classList.add("line");
    check.checked=true;
    }
    deleteElem.addEventListener('click',()=>{
    let index=todos.indexOf(elem);
    console.log(index);
    todos.splice(index,1);
    localStorage.setItem('todos',JSON.stringify(todos));
    listItems.removeChild(li);
    });
    check.addEventListener('click',()=>{
    elem.completed=check.checked;
    localStorage.setItem('todos',JSON.stringify(todos));
    if(elem.completed){
    input.classList.add("line");
    }
    else{
    input.classList.remove("line");
    }
    // createItem();
    });
    edit.addEventListener('click',()=>{
    input.readOnly=false;
    input.focus();
    console.log('jknqkjd');
    input.addEventListener('blur',()=>{
    input.readOnly=true;
    elem.value=input.value;
    console.log(elem.value);
    localStorage.setItem('todos',JSON.stringify(todos));
    // createItem();
    })
    });
    });
}
**********************************************************************************
